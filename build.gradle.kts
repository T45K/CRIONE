/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM.
    id("org.jetbrains.kotlin.jvm").version("1.3.31")

    // Apply the application plugin to add support for building a CLI application.
    application
    jacoco
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // Use the Kotlin JDK 8 standard library.
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Use RefactoringMiner
    compile(fileTree(mapOf("dir" to "libs", "include" to arrayOf("*.jar"))))
    compile("org.apache.commons:commons-text:1.6")
    compile("commons-io:commons-io:2.6")

    // Use JDT
    compile("org.eclipse.jdt:org.eclipse.jdt.core:3.18.0")

    // Use JGit
    compile("org.eclipse.jgit:org.eclipse.jgit:5.5.0.201909110433-r")

    // Use digest method
    compile("commons-codec:commons-codec:1.12")

    // Use Logger
    compile("ch.qos.logback:logback-classic:1.1.3")

    // Use args4j
    compile("args4j:args4j:2.33")

    // Use JSON
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.10.0")

    // Use the Kotlin test library.
    testCompile("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testCompile("org.jetbrains.kotlin:kotlin-test-junit")

    // Use AssertJ
    testCompile("org.assertj:assertj-core:3.14.0")

}

application {
    // Define the main class for the application
    mainClassName = "jp.ac.osaka_u.ist.sdl.crione.MainKt"
}

tasks.jacocoTestReport {
    reports {
        xml.isEnabled = true
        html.isEnabled = true
    }
}

val jar by tasks.getting(Jar::class) {
    manifest {
        attributes["Main-Class"] = "jp.ac.osaka_u.ist.sdl.crione.MainKt"
    }

    from(
            configurations.compile.get().map {
                if (it.isDirectory) it else zipTree(it)
            }
    )
    exclude("META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA")
}

val run by tasks.getting(JavaExec::class) {
    if (project.hasProperty("args")) {
        args = (project.property("args") as String).split(" ")
    }
}
